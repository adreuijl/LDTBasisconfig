GRAPH config:Theatre {

# ==========================
#
# BegrippenUpload
#
# ==========================

  config:BegrippenUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/begrippen";
    elmo:stage config:Stage;
    elmo:putService config:BegrippenUploadService
  .

  config:BegrippenUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:BegrippenUploadTransaction;
  .

  config:BegrippenUploadTransaction a elmo:Transaction;
    elmo:sequentialFlow (
      [
        a elmo:UpdateStep;
        rdfs:label "clear target graph";
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://standaard.aquo.nl/data/begrippen>"
      ]
      [ a elmo:AssertionStep;
        rdfs:label "De upload mag geen concepten zonder rdfs:label bevatten.";
        elmo:assertNot '''
          PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
          PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
          PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
          ASK {
            ?s rdf:type ?type.
            FILTER(  ?type IN ( skos:Concept ) )
            FILTER NOT EXISTS {
              ?s rdfs:label ?label.
            }
          }
      ''';
      ]      
      [
        a elmo:PersistenceStep;
        rdfs:label "voeg triples toe aan targetGraph";
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://standaard.aquo.nl/data/begrippen>
      ]
      [ a elmo:UpdateStep;
        rdfs:label "We zoeken naar begrippen die een skos:narrower relatie hebben naar een ander begrip, maar waar dat andere begrip niet de inverse broader relatie heeft, die relatie voegen we daarna alsnog toe.";
        elmo:backend config:UpdateBackend;
        elmo:query """
          PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
          INSERT {
            GRAPH <http://standaard.aquo.nl/data/begrippen> {
              ?narrower skos:broader ?begrip
            }
          }
          WHERE {
            GRAPH <http://standaard.aquo.nl/data/begrippen> {
              ?begrip a  skos:Concept;
                skos:narrower ?narrower.
              FILTER NOT EXISTS {
                ?narrower a skos:Concept;
                  skos:broader ?begrip
              }
            }
          }
        """
      ]
      [ a elmo:UpdateStep;
        rdfs:label "We zoeken naar begrippen die een skos:broader relatie hebben naar een ander begrip, maar waar dat andere begrip niet de inverse broader relatie heeft, die relatie voegen we daarna alsnog toe.";
        elmo:backend config:UpdateBackend;
        elmo:query """
          PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
          INSERT {
            GRAPH <http://standaard.aquo.nl/data/begrippen> {
              ?broader skos:narrower ?begrip
            }
          }
          WHERE {
            GRAPH <http://standaard.aquo.nl/data/begrippen> {
              ?begrip a  skos:Concept;
                skos:broader ?broader.
              FILTER NOT EXISTS {
                ?broader a skos:Concept;
                  skos:narrower ?begrip
              }
            }
          }
        """
      ]
      [ a elmo:UpdateStep;
        rdfs:label "We zoeken naar begrippen die een skosthes:narrowerPartitive relatie hebben naar een ander begrip, maar waar dat andere begrip niet de inverse relatie heeft, die relatie voegen we daarna alsnog toe.";
        elmo:backend config:UpdateBackend;
        elmo:query """
          PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
          PREFIX skosthes: <http://purl.org/iso25964/skos-thes#>
          INSERT {
            GRAPH <http://standaard.aquo.nl/data/begrippen> {
              ?narrower skosthes:broaderPartitive ?begrip
            }
          }
          WHERE {
            GRAPH <http://standaard.aquo.nl/data/begrippen> {
              ?begrip a skos:Concept;
                skosthes:narrowerPartitive ?narrower.
              FILTER NOT EXISTS {
                ?narrower a skos:Concept;
                  skos:broaderPartitive ?begrip
              }
            }
          }
       """
      ]
      [ a elmo:UpdateStep;
        rdfs:label "We zoeken naar begrippen die een skos:related relatie hebben naar een ander begrip, maar waar dat andere begrip niet de inverse relatie heeft, die relatie voegen we daarna alsnog toe.";
        elmo:backend config:UpdateBackend;
        elmo:query """
          PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
          PREFIX skosthes: <http://purl.org/iso25964/skos-thes#>
          INSERT {
            GRAPH <http://standaard.aquo.nl/data/begrippen> {
              ?related skosthes:narrowerPartitive ?begrip
            }
          }
          WHERE {
            GRAPH <http://standaard.aquo.nl/data/begrippen> {
              ?begrip a skos:Concept;
                skos:related ?related.
              FILTER NOT EXISTS {
                ?related a skos:Concept;
                  skos:related ?begrip
              }
            }
          }
       """
      ]
    )
  .

# ==========================
#
# CategorieenUpload
#
# ==========================

  config:CategorieenUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/categorieen";
    elmo:stage config:Stage;
    elmo:putService config:CategorieenUploadService
  .

  config:CategorieenUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:CategorieenUploadTransaction
  .

  config:CategorieenUploadTransaction a elmo:Transaction;
    elmo:sequentialFlow (
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://standaard.aquo.nl/data/categorieen>"
      ]
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://standaard.aquo.nl/data/categorieen>
      ]
    )
  .




# ==========================
#
# DomeintabelUpload
#
# ==========================

  config:DomeintabelUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/domeintabel";
    elmo:stage config:Stage;
    elmo:putService config:DomeintabelUploadService;
  .

  config:DomeintabelUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:DomeintabelUploadTransaction;
  .

# Helaas werkt de mapper nog niet voor services, dus vandaar via een parameter
  config:DomeinParameter a elmo:TermParameter;
    elmo:name "domein";
		elmo:shape [
			sh:datatype xsd:string;
		]
  .

 #
 # UploadTransaction is nu nog wat ingewikkeld, omdat je niet goed met de parameter kunt werken
 # De volgende stappen worden uitgevoerd:
 # 1. Leegmaken van een tijdelijke graph
 # 2. Vullen van de tijdelijke graph met de geuploade data
 # 3. Overzetten van de data naar de juiste named graph, op basis van de parameter
 #    Daarbij is de parameter een string, die omgezet moet worden naar een URI (het BIND gedeelte)
 #

 config:DomeintabelUploadTransaction a elmo:Transaction;
    elmo:requiredParameter config:DomeinParameter;
    elmo:sequentialFlow (
      [
        a elmo:UpdateStep;
        rdfs:label "Leegmaken van tijdelijke graph";
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://standaard.aquo.nl/data/domeintabel.tmp>"
      ]
      [
        a elmo:PersistenceStep;
        rdfs:label "Vullen van de tijdelijke graph met de geuploade data";
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://standaard.aquo.nl/data/domeintabel.tmp>
      ]
      [
        a elmo:UpdateStep;
        rdfs:label "oude data weggooien";
        elmo:backend config:UpdateBackend;
        elmo:query """
          DELETE {
            GRAPH ?domeingraph {
              ?s ?p ?o
            }
          }
          WHERE {
            BIND (iri(concat("http://standaard.aquo.nl/data/domeintabel/",?domein)) as ?domeingraph)
            GRAPH ?domeingraph {
              ?s ?p ?o
            }
          }
        """
      ]
      [
        a elmo:UpdateStep;
        rdfs:label "Nieuwe data toevoegen";
        elmo:backend config:UpdateBackend;
        elmo:query """
          PREFIX prov: <http://www.w3.org/ns/prov#>
          INSERT {
            GRAPH ?domeingraph {
              ?s ?p ?o
            }
          }
          WHERE {
            GRAPH <http://standaard.aquo.nl/data/domeintabel.tmp> {
              ?s ?p ?o
              BIND (iri(concat("http://standaard.aquo.nl/data/domeintabel/",?domein)) as ?domeingraph)
            }
          }
        """
      ]
      [
        a elmo:UpdateStep;
        rdfs:label "Domeintabel toevoegen aan de lijst van domeintabellen";
        elmo:backend config:UpdateBackend;
        elmo:query """
          prefix dct: <http://purl.org/dc/terms/>
          prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
          prefix dcat: <http://www.w3.org/ns/dcat#>
          INSERT {
            GRAPH <http://standaard.aquo.nl/data/domeintabellen> {
              <http://standaard.aquo.nl/id/dataset/domeintabellen> dct:hasPart ?domeintabel.
              ?domeintabel rdfs:label ?domein.
            }
          }
          WHERE {
            BIND (iri(concat("http://standaard.aquo.nl/id/domeintabel/",?domein)) as ?domeintabel)
          }
        """
      ]
    )
  .



# ==========================
#
# DomeinMetadata Upload
#
# ==========================

  config:DomeinMetaUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/domeinmeta";
    elmo:stage config:Stage;
    elmo:putService config:DomeinMetaUploadService
  .

  config:DomeinMetaUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:DomeinMetaUploadTransaction
  .

   config:DomeinMetaParameter a elmo:TermParameter;
    elmo:name "domeinmeta";
		elmo:shape [
			sh:datatype xsd:string;
		]
  .

  config:DomeinMetaUploadTransaction a elmo:Transaction;
    elmo:sequentialFlow (
      [ a elmo:ValidationStep;
        elmo:conformsTo aquo:DomeinTabelShape;
      ]
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://standaard.aquo.nl/data/domeintabelmetadata>"
      ]
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://standaard.aquo.nl/data/domeintabelmetadata>
      ]
    )
  .


  # ==========================
#
# Domein-begrip relatie Upload
#
# ==========================

  config:RelatieUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/relatie";
    elmo:stage config:Stage;
    elmo:putService config:RelatieUploadService
  .

  config:RelatieUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:RelatieUploadTransaction
  .

  config:RelatieUploadTransaction a elmo:Transaction;
    elmo:sequentialFlow (
            [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://standaard.aquo.nl/data/links>"
      ]
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://standaard.aquo.nl/data/links>
      ]

    )


  .

# ==========================
#
# Shacl Upload tbv domeintabel metadata
#
# ==========================

  config:DomeintabelShaclUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/shacl";
    elmo:stage config:Stage;
    elmo:putService config:DomeintabelShaclUploadService
  .

  config:DomeintabelShaclUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:DomeintabelShaclUploadTransaction
  .

  config:DomeintabelShaclUploadTransaction a elmo:Transaction;
    elmo:sequentialFlow (
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://standaard.aquo.nl/def/domeintabel>"
      ]
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://standaard.aquo.nl/def/domeintabel>
      ]

    )


  .

# ==========================
#
# VocabulaireUpload
#
# ==========================

  config:AquoVocabulaireUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/aquovocabulaire";
    elmo:stage config:Stage;
    elmo:putService config:AquoVocabulaireUploadService
  .

  config:AquoVocabulaireUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:AquoVocabulaireUploadTransaction
  .

  config:AquoVocabulaireUploadTransaction a elmo:Transaction;
    elmo:sequentialFlow (
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://standaard.aquo.nl/def/aquo>"
      ]
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://standaard.aquo.nl/def/aquo>
      ]
    )
  .

  config:VocabulaireUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/vocabulaire";
    elmo:stage config:Stage;
    elmo:putService config:VocabulaireUploadService
  .

  config:VocabulaireUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:VocabulaireUploadTransaction
  .

  config:VocabulaireUploadTransaction a elmo:Transaction;
    elmo:sequentialFlow (
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://standaard.aquo.nl/def/aquoprofiel>"
      ]
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://standaard.aquo.nl/def/aquoprofiel>
      ]
    )
  .


}
