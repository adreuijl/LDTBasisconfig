GRAPH config:Theatre {

# ==========================
#
# BegrippenUpload
#
# ==========================

  config:BegrippenUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/begrippen";
    elmo:stage config:Stage;
    elmo:putService config:BegrippenUploadService
  .
  
  config:BegrippenUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:BegrippenUploadTransaction;
  .

  config:BegrippenUploadTransaction a elmo:Transaction;
    elmo:sequentialFlow (
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://data.aquo.nl/id/dataset/begrippen>"
      ]
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://data.aquo.nl/id/dataset/begrippen>
      ]
      [ a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query """
         prefix skos: <http://www.w3.org/2004/02/skos/core#>
          insert { 
            graph <http://data.aquo.nl/id/dataset/begrippen> {
              ?broader skos:narrower ?begrip 
            }
          }
             where { 
              graph <http://data.aquo.nl/id/dataset/begrippen> 
              {
               ?begrip a  skos:Concept;
                  skos:broader ?broader.
                    FILTER NOT EXISTS { 
                      ?broader a skos:Concept;
                        skos:narrower ?begrip
                    }
              }       
            }
        """
      ]
      [ a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query """
          prefix skos: <http://www.w3.org/2004/02/skos/core#>
          prefix skosthes: <http://purl.org/iso25964/skos-thes#>
          insert  { 
            graph <http://data.aquo.nl/id/dataset/begrippen> {
              ?broader skosthes:narrowerPartitive ?begrip 
            }
          }
            where { 
              graph <http://data.aquo.nl/id/dataset/begrippen> {
                ?begrip a  skos:Concept;
                  skosthes:broaderPartitive ?broader.
                    FILTER NOT EXISTS { 
                      ?broader a skos:Concept;
                        skos:narrowerPartitive ?begrip
                    }
              }
            }
       """
      ]
    )
  .
  
  
  
  
  
  
  
  
  # updatestep is het infoproduct
  
  
  
  
  

# ==========================
#
# DomeintabelUpload
#
# ==========================

  config:DomeintabelUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/domeintabel";
    elmo:stage config:Stage;
    elmo:putService config:DomeintabelUploadService;
  .
  
  config:DomeintabelUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:DomeintabelUploadTransaction;
  .
  
  # Helaas werkt de mapper nog niet voor services, dus vandaar via een parameter
  config:DomeinParameter a elmo:TermParameter;
    elmo:name "domein";
		elmo:shape [
			sh:datatype xsd:string;
		]
  .
  
  #
  # UploadTransaction is nu nog wat ingewikkeld, omdat je niet goed met de parameter kunt werken
  # De volgende stappen worden uitgevoerd:
  # 1. Leegmaken van een tijdelijke graph
  # 2. Vullen van de tijdelijke graph met de geuploade data
  # 3. Overzetten van de data naar de juiste named graph, op basis van de parameter
  #    Daarbij is de parameter een string, die omgezet moet worden naar een URI (het BIND gedeelte)
  #
  config:DomeintabelUploadTransaction a elmo:Transaction;
    elmo:requiredParameter config:DomeinParameter;
    elmo:sequentialFlow (
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://data.aquo.nl/id/dataset/domeintabel.tmp>"
      ]
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://data.aquo.nl/id/dataset/domeintabel.tmp>
      ]
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query """
          PREFIX dct: <http://purl.org/dc/terms/>
          delete {
            graph ?domeingraphversion {
              ?s ?p ?o
            }
          }
          where {
            BIND (iri(concat("http://data.aquo.nl/id/dataset/domeintabel/",?domein)) as ?domeingraph)
            graph ?domeingraphversion {
              ?domeingraphversion dct:replacedBy ?domeingraph.
              ?s ?p ?o
            }
          }
        """
      ]
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query """
          delete {
            graph ?domeingraph {
              ?s ?p ?o
            }
          }
          where {
            BIND (iri(concat("http://data.aquo.nl/id/dataset/domeintabel/",?domein)) as ?domeingraph)
            graph ?domeingraph {
              ?s ?p ?o
            }
          }
        """
      ]
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query """
          insert {
            graph ?domeingraph {
              ?s ?p ?o
            }
          }
          where {
            graph <http://data.aquo.nl/id/dataset/domeintabel.tmp> {
              ?s ?p ?o
              BIND (iri(concat("http://data.aquo.nl/id/dataset/domeintabel/",?domein)) as ?domeingraph)
            }
          }
        """
      ]
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query """
          prefix dct: <http://purl.org/dc/terms/>
          prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
          insert {
            graph <http://data.aquo.nl/id/dataset/domeintabel> {
              <http://data.aquo.nl/id/dataset/domeintabel> dct:hasPart ?domeingraph.
              ?domeingraph rdfs:label ?domein
            }
          }
          where {
            graph <http://data.aquo.nl/id/dataset/domeintabel> {
              BIND (iri(concat("http://data.aquo.nl/id/dataset/domeintabel/",?domein)) as ?domeingraph)
            }
          }
        """
      ]
    )
  .

# ==========================
#
# CategorieenUpload
#
# ==========================

  config:CategorieenUploadEndpoint a elmo:Endpoint;
    elmo:pathPattern "/beheer/bulkupload/categorieen";
    elmo:stage config:Stage;
    elmo:putService config:CategorieenUploadService
  .

  config:CategorieenUploadService a elmo:Service;
    elmo:stage config:Stage;
    elmo:transaction config:CategorieenUploadTransaction
  .

  config:CategorieenUploadTransaction a elmo:Transaction;
    elmo:sequentialFlow (
      [
        a elmo:UpdateStep;
        elmo:backend config:UpdateBackend;
        elmo:query "clear graph <http://data.aquo.nl/id/dataset/categorieen>"
      ]
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-ps:InsertIntoGraph;
        elmo:backend config:UpdateBackend;
        elmo:targetGraph <http://data.aquo.nl/id/dataset/categorieen>
      ]
    )
  .

}